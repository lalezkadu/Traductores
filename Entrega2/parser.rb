#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer'
require_relative 'clasesParser'

class ErrorSintactico < RuntimeError

	def initialize(token)
		@token = token
	end

	def to_s
		"fila: " + @token.fila.to_s() + ", columna: " + @token.columna.to_s() + ", token inesperado: #{@token.token} \n"   # EL PROBLEMA ES ACA
	end
end

class ParserRtn < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 248)
	
	def initialize(tokens)
		@tokens = tokens
		@yydebug = true
		super()
	end 

	def parse
		do_parse
	end

	def next_token
		#puts @tokens
		@tokens.shift
	end

	def on_error(id, token, pila)
		raise ErrorSintactico.new(token)
	end
	
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    80,    72,    11,    68,    80,    72,    11,    68,     7,    76,
   160,    69,    72,    11,    68,    69,   147,    72,    11,    68,
    75,    67,    69,    90,   161,    67,   144,    69,    13,    14,
    86,   145,    67,    87,    72,    11,    68,    67,    45,    21,
    22,    72,    11,    68,    69,    21,    22,     5,    73,    74,
    11,    69,    73,    74,    67,     6,    72,    11,    68,    73,
    74,    67,    21,    22,    73,    74,    69,    72,    11,    68,
    72,    11,    68,    72,    11,    68,    67,    69,     5,    15,
    69,    73,    74,    69,    21,    22,     6,    67,    73,    74,
    67,   123,    16,    67,   124,    17,    72,    11,    68,    21,
    22,    21,    22,    73,    74,    48,    69,    49,    11,    72,
    11,    68,    55,    56,    73,    74,    67,    73,    74,    69,
    73,    74,    72,    11,    68,    72,    11,    68,    57,    67,
   114,    58,    69,    59,    60,    69,    61,    62,    72,    11,
    68,    11,    67,    73,    74,    67,    11,    88,    69,    11,
    92,    72,    11,    68,    75,    93,    73,    74,    67,    76,
   116,    69,   116,   118,    72,    11,    68,   125,    11,    73,
    74,    67,    73,    74,    69,   153,   165,    72,    11,    68,
    72,    11,    68,   168,    67,    73,    74,    69,   169,   173,
    69,   175,   178,    72,    11,    68,   182,    67,    73,    74,
    67,   nil,   nil,    69,   nil,   nil,    72,    11,    68,   nil,
   nil,    73,    74,    67,   nil,   nil,    69,   nil,   nil,    72,
    11,    68,   nil,   nil,    73,    74,    67,    73,    74,    69,
   nil,   nil,    72,    11,    68,    72,    11,    68,   nil,    67,
    73,    74,    69,   nil,   nil,    69,   nil,   nil,    72,    11,
    68,   nil,    67,    73,    74,    67,   nil,   nil,    69,   nil,
   nil,    72,    11,    68,   nil,   nil,    73,    74,    67,   nil,
   nil,    69,   nil,   nil,    72,    11,    68,   nil,   nil,    73,
    74,    67,    73,    74,    69,   nil,   nil,    72,    11,    68,
    72,    11,    68,   nil,    67,    73,    74,    69,   nil,   nil,
    69,   nil,   nil,    72,    11,    68,   nil,    67,    73,    74,
    67,   nil,   nil,    69,   nil,   nil,    72,    11,    68,   nil,
   nil,    73,    74,    67,   nil,    11,    69,    94,    95,    96,
    97,    98,   nil,   nil,    73,    74,    67,    73,    74,    94,
    95,    96,    97,    98,   nil,   nil,   nil,    11,    35,   nil,
    73,    74,    13,    14,    36,   nil,    38,    39,    40,    41,
   nil,   nil,    42,    73,    74,   nil,    43,   nil,    44,    53,
    35,    11,   nil,   nil,    13,    14,    36,   nil,    38,    39,
    40,    41,   nil,   nil,    42,   nil,   nil,   nil,    43,   nil,
    44,   nil,    11,   nil,    35,   nil,   nil,   nil,    13,    14,
    36,   nil,    38,    39,    40,    41,   nil,   nil,    42,    11,
   nil,   nil,    43,   nil,    44,    35,   nil,   nil,   nil,    13,
    14,    36,   nil,    38,    39,    40,    41,   nil,    11,    42,
   nil,   nil,    35,    43,   nil,    44,    13,    14,    36,   nil,
    38,    39,    40,    41,   nil,    11,    42,   nil,   nil,   nil,
    43,    35,    44,   nil,   nil,    13,    14,    36,   nil,    38,
    39,    40,    41,   nil,   nil,    42,   nil,    11,    35,    43,
   nil,    44,    13,    14,    36,   nil,    38,    39,    40,    41,
   nil,   nil,    42,   nil,    11,   nil,    43,   nil,    44,   152,
    35,   nil,   nil,   nil,    13,    14,    36,   nil,    38,    39,
    40,    41,   nil,   nil,    42,   nil,    11,    35,    43,   nil,
    44,    13,    14,    36,   nil,    38,    39,    40,    41,   nil,
   nil,    42,   nil,    11,   nil,    43,   nil,    44,   157,    35,
   nil,   nil,   nil,    13,    14,    36,   nil,    38,    39,    40,
    41,   nil,   nil,    42,   nil,   163,    35,    43,    11,    44,
    13,    14,    36,   nil,    38,    39,    40,    41,   nil,   nil,
    42,   nil,   nil,   nil,    43,    11,    44,   nil,   nil,   nil,
   164,    35,   nil,   nil,   nil,    13,    14,    36,   nil,    38,
    39,    40,    41,   nil,   nil,    42,   nil,    11,    35,    43,
   nil,    44,    13,    14,    36,   nil,    38,    39,    40,    41,
   nil,   nil,    42,   nil,    11,   nil,    43,   nil,    44,   167,
    35,   nil,   nil,   nil,    13,    14,    36,   nil,    38,    39,
    40,    41,   nil,   nil,    42,   nil,    11,    35,    43,   nil,
    44,    13,    14,    36,   nil,    38,    39,    40,    41,   nil,
   nil,    42,   nil,    11,   nil,    43,   nil,    44,   172,    35,
   nil,   nil,   nil,    13,    14,    36,   nil,    38,    39,    40,
    41,   nil,   nil,    42,   nil,    11,    35,    43,   nil,    44,
    13,    14,    36,   nil,    38,    39,    40,    41,   nil,   nil,
    42,   nil,    11,   nil,    43,   nil,    44,   179,    35,   nil,
   nil,   nil,    13,    14,    36,   nil,    38,    39,    40,    41,
   nil,   nil,    42,   nil,    11,    35,    43,   nil,    44,    13,
    14,    36,   nil,    38,    39,    40,    41,   nil,   nil,    42,
   nil,    11,   nil,    43,   nil,    44,   184,    35,   nil,   nil,
   nil,    13,    14,    36,   nil,    38,    39,    40,    41,   nil,
   nil,    42,   nil,    11,    35,    43,   nil,    44,    13,    14,
    36,   nil,    38,    39,    40,    41,   nil,   nil,    42,   nil,
   nil,   nil,    43,   nil,    44,   186,    35,   nil,   nil,   nil,
    13,    14,    36,   nil,    38,    39,    40,    41,   nil,   nil,
    42,   nil,   nil,   nil,    43,   nil,    44,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,   177,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   176,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   117,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   120,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   nil,   nil,   143,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    94,    95,    96,    97,    98,    99,   100,   -82,
   -82,   -82,   -82,   -82,   -82,    94,    95,    96,    97,    98,
    99,   100,   -82,   -82,   -82,   -82,   -82,   -82,    94,    95,
    96,    97,    98,    99,   100,   -82,   -82,   -82,   -82,   -82,
   -82,    94,    95,    96,    97,    98,    99,   100,   -82,   -82,
   -82,   -82,   -82,   -82,    94,    95,    96,    97,    98,    99,
   100,   -82,   -82,   -82,   -82,   -82,   -82,    94,    95,    96,
    97,    98,    99,   100,   -82,   -82,   -82,   -82,   -82,   -82,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106 ]

racc_action_check = [
    39,    39,    39,    39,    40,    40,    40,    40,     1,    37,
   148,    39,    36,    36,    36,    40,   116,   116,   116,   116,
    37,    39,    36,    49,   148,    40,   115,   116,     6,     6,
    45,   115,    36,    45,    41,    41,    41,   116,    16,    49,
    49,    43,    43,    43,    41,    13,    13,     0,    39,    39,
     5,    43,    40,    40,    41,     0,    44,    44,    44,    36,
    36,    43,    16,    16,   116,   116,    44,    67,    67,    67,
    68,    68,    68,    69,    69,    69,    44,    67,     2,     7,
    68,    41,    41,    69,    87,    87,     2,    67,    43,    43,
    68,    88,    10,    69,    88,    12,    75,    75,    75,   124,
   124,   125,   125,    44,    44,    17,    75,    18,    20,    76,
    76,    76,    26,    27,    67,    67,    75,    68,    68,    76,
    69,    69,    94,    94,    94,    95,    95,    95,    28,    76,
    76,    29,    94,    30,    31,    95,    32,    34,    96,    96,
    96,    38,    94,    75,    75,    95,    42,    46,    96,    47,
    50,    97,    97,    97,    52,    53,    76,    76,    96,    66,
    78,    97,    81,    83,    98,    98,    98,    89,    92,    94,
    94,    97,    95,    95,    98,   122,   152,    99,    99,    99,
   100,   100,   100,   155,    98,    96,    96,    99,   157,   167,
   100,   170,   172,   101,   101,   101,   179,    99,    97,    97,
   100,   nil,   nil,   101,   nil,   nil,   102,   102,   102,   nil,
   nil,    98,    98,   101,   nil,   nil,   102,   nil,   nil,   103,
   103,   103,   nil,   nil,    99,    99,   102,   100,   100,   103,
   nil,   nil,   104,   104,   104,   105,   105,   105,   nil,   103,
   101,   101,   104,   nil,   nil,   105,   nil,   nil,   106,   106,
   106,   nil,   104,   102,   102,   105,   nil,   nil,   106,   nil,
   nil,   107,   107,   107,   nil,   nil,   103,   103,   106,   nil,
   nil,   107,   nil,   nil,   108,   108,   108,   nil,   nil,   104,
   104,   107,   105,   105,   108,   nil,   nil,   118,   118,   118,
   145,   145,   145,   nil,   108,   106,   106,   118,   nil,   nil,
   145,   nil,   nil,   162,   162,   162,   nil,   118,   107,   107,
   145,   nil,   nil,   162,   nil,   nil,   176,   176,   176,   nil,
   nil,   108,   108,   162,   nil,    14,   176,   133,   133,   133,
   133,   133,   nil,   nil,   118,   118,   176,   145,   145,   134,
   134,   134,   134,   134,   nil,   nil,   nil,    23,    14,   nil,
   162,   162,    14,    14,    14,   nil,    14,    14,    14,    14,
   nil,   nil,    14,   176,   176,   nil,    14,   nil,    14,    23,
    23,    86,   nil,   nil,    23,    23,    23,   nil,    23,    23,
    23,    23,   nil,   nil,    23,   nil,   nil,   nil,    23,   nil,
    23,   nil,    90,   nil,    86,   nil,   nil,   nil,    86,    86,
    86,   nil,    86,    86,    86,    86,   nil,   nil,    86,   117,
   nil,   nil,    86,   nil,    86,    90,   nil,   nil,   nil,    90,
    90,    90,   nil,    90,    90,    90,    90,   nil,   119,    90,
   nil,   nil,   117,    90,   nil,    90,   117,   117,   117,   nil,
   117,   117,   117,   117,   nil,   120,   117,   nil,   nil,   nil,
   117,   119,   117,   nil,   nil,   119,   119,   119,   nil,   119,
   119,   119,   119,   nil,   nil,   119,   nil,   121,   120,   119,
   nil,   119,   120,   120,   120,   nil,   120,   120,   120,   120,
   nil,   nil,   120,   nil,   123,   nil,   120,   nil,   120,   121,
   121,   nil,   nil,   nil,   121,   121,   121,   nil,   121,   121,
   121,   121,   nil,   nil,   121,   nil,   126,   123,   121,   nil,
   121,   123,   123,   123,   nil,   123,   123,   123,   123,   nil,
   nil,   123,   nil,   150,   nil,   123,   nil,   123,   126,   126,
   nil,   nil,   nil,   126,   126,   126,   nil,   126,   126,   126,
   126,   nil,   nil,   126,   nil,   150,   150,   126,   151,   126,
   150,   150,   150,   nil,   150,   150,   150,   150,   nil,   nil,
   150,   nil,   nil,   nil,   150,   153,   150,   nil,   nil,   nil,
   151,   151,   nil,   nil,   nil,   151,   151,   151,   nil,   151,
   151,   151,   151,   nil,   nil,   151,   nil,   154,   153,   151,
   nil,   151,   153,   153,   153,   nil,   153,   153,   153,   153,
   nil,   nil,   153,   nil,   161,   nil,   153,   nil,   153,   154,
   154,   nil,   nil,   nil,   154,   154,   154,   nil,   154,   154,
   154,   154,   nil,   nil,   154,   nil,   166,   161,   154,   nil,
   154,   161,   161,   161,   nil,   161,   161,   161,   161,   nil,
   nil,   161,   nil,   168,   nil,   161,   nil,   161,   166,   166,
   nil,   nil,   nil,   166,   166,   166,   nil,   166,   166,   166,
   166,   nil,   nil,   166,   nil,   174,   168,   166,   nil,   166,
   168,   168,   168,   nil,   168,   168,   168,   168,   nil,   nil,
   168,   nil,   177,   nil,   168,   nil,   168,   174,   174,   nil,
   nil,   nil,   174,   174,   174,   nil,   174,   174,   174,   174,
   nil,   nil,   174,   nil,   181,   177,   174,   nil,   174,   177,
   177,   177,   nil,   177,   177,   177,   177,   nil,   nil,   177,
   nil,   183,   nil,   177,   nil,   177,   181,   181,   nil,   nil,
   nil,   181,   181,   181,   nil,   181,   181,   181,   181,   nil,
   nil,   181,   nil,   185,   183,   181,   nil,   181,   183,   183,
   183,   nil,   183,   183,   183,   183,   nil,   nil,   183,   nil,
   nil,   nil,   183,   nil,   183,   185,   185,   nil,   nil,   nil,
   185,   185,   185,   nil,   185,   185,   185,   185,   nil,   nil,
   185,   nil,   nil,   nil,   185,   nil,   185,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   171,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   171,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
   nil,   nil,   nil,   nil,   nil,   nil,   149,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    85,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   nil,   nil,   109,    63,    63,
    63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
    63,    63,    63,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141 ]

racc_action_pointer = [
    25,     8,    56,   nil,   nil,    46,    -3,    79,   nil,   nil,
    69,   nil,    69,    -3,   321,   nil,    14,    78,    80,   nil,
   104,   nil,   nil,   343,   nil,   nil,    85,    86,   101,   104,
   106,   107,   109,   nil,   110,   nil,     9,   -14,   137,    -2,
     2,    31,   142,    38,    53,     5,   123,   145,   nil,    -9,
   121,   nil,   120,   128,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   951,   nil,   nil,   136,    64,    67,    70,
   nil,   nil,   nil,   nil,   nil,    93,   106,   nil,   131,   966,
   nil,   133,   848,   121,   780,   881,   367,    36,    66,   138,
   388,   nil,   164,   nil,   119,   122,   135,   148,   161,   174,
   177,   190,   203,   216,   229,   232,   245,   258,   271,   933,
   nil,   nil,   981,   996,   nil,     2,    14,   405,   284,   424,
   441,   463,   150,   480,    51,    53,   502,   nil,   nil,   nil,
   nil,   nil,   nil,   320,   332,  1055,  1068,  1081,  1094,  1107,
  1120,  1133,  1041,   nil,   nil,   287,  1011,   nil,   -16,   833,
   519,   544,   149,   561,   583,   158,   nil,   161,  1026,   nil,
   nil,   600,   300,   nil,   nil,   nil,   622,   162,   639,   nil,
   165,   795,   165,   nil,   661,   nil,   313,   678,   nil,   169,
   907,   700,   nil,   717,   nil,   739,   nil ]

racc_action_default = [
   -82,   -82,   -82,    -2,    -4,   -82,   -82,   -82,    -1,    -3,
   -82,   -81,   -82,   -82,   -82,   187,   -82,   -82,   -82,   -14,
   -82,   -74,   -75,   -82,   -20,   -21,   -82,   -82,   -82,   -82,
   -82,   -82,   -82,   -30,   -82,   -32,   -82,   -82,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -11,   -82,
   -16,   -17,   -18,   -82,   -22,   -23,   -24,   -25,   -26,   -27,
   -28,   -29,   -31,   -33,   -49,   -50,   -51,   -82,   -82,   -82,
   -76,   -77,   -78,   -79,   -80,   -82,   -82,   -35,   -36,   -38,
   -39,   -37,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -10,
   -82,   -15,   -82,   -13,   -82,   -82,   -82,   -82,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,
   -53,   -54,   -34,   -73,   -70,   -82,   -82,   -82,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -19,   -55,   -56,
   -57,   -58,   -59,   -60,   -61,   -62,   -63,   -64,   -65,   -66,
   -67,   -68,   -69,   -52,   -71,   -82,   -40,   -41,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,    -9,   -82,   -72,   -42,
   -43,   -82,   -82,   -47,   -48,    -5,   -82,   -82,   -82,   -12,
   -82,   -82,   -82,    -6,   -82,   -44,   -82,   -82,    -7,   -82,
   -82,   -82,    -8,   -82,   -46,   -82,   -45 ]

racc_goto_table = [
    10,     1,    46,    19,    23,     3,     4,     8,     9,    37,
    78,    81,     2,    12,    18,    52,    50,    47,    37,    51,
   159,   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    77,   nil,   nil,   nil,    83,   nil,    91,
   nil,   nil,    89,   nil,   nil,   nil,   nil,   nil,    34,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   121,   nil,   nil,   nil,
   126,    37,   nil,   nil,   nil,    37,   nil,   127,   122,   nil,
   nil,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,
   151,   156,    37,   154,    37,    37,    37,   nil,    37,   nil,
    34,    37,   nil,   nil,    34,   155,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   166,   nil,    37,    37,   nil,    37,    37,
   nil,    34,   nil,    34,    34,    34,    37,    34,   174,   nil,
    34,    37,   nil,    37,   nil,   nil,   nil,   181,   nil,    37,
   nil,   nil,    37,   185,   nil,   nil,    37,   nil,    37,   nil,
    37,   nil,   nil,   nil,    34,    34,   nil,    34,    34,   148,
   nil,   nil,   nil,    54,   nil,    34,   nil,   nil,    54,   nil,
    34,   nil,    34,   nil,   nil,   nil,   nil,   nil,    34,   nil,
   nil,    34,   nil,   nil,   nil,    34,   nil,    34,   nil,    34,
   nil,   nil,    54,    54,   nil,   nil,    54,    63,   nil,   nil,
   nil,   nil,    82,   170,    84,    85,   nil,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,    54,   nil,   nil,   nil,    54,   109,   110,
   111,   nil,   nil,   nil,   nil,   nil,   112,   113,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,   149,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   158,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180 ]

racc_goto_check = [
     5,     1,     7,    11,     6,     3,     4,     3,     4,     5,
    24,    24,     2,     9,    10,     5,    12,     8,     5,    13,
    25,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,     5,   nil,    11,
   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
     6,     5,   nil,   nil,   nil,     5,   nil,     5,     8,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
     6,     7,     5,     6,     5,     5,     5,   nil,     5,   nil,
    22,     5,   nil,   nil,    22,     8,     8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,   nil,     5,     5,   nil,     5,     5,
   nil,    22,   nil,    22,    22,    22,     5,    22,     6,   nil,
    22,     5,   nil,     5,   nil,   nil,   nil,     6,   nil,     5,
   nil,   nil,     5,     6,   nil,   nil,     5,   nil,     5,   nil,
     5,   nil,   nil,   nil,    22,    22,   nil,    22,    22,    15,
   nil,   nil,   nil,    15,   nil,    22,   nil,   nil,    15,   nil,
    22,   nil,    22,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,    22,   nil,   nil,   nil,    22,   nil,    22,   nil,    22,
   nil,   nil,    15,    15,   nil,   nil,    15,    23,   nil,   nil,
   nil,   nil,    23,    15,    23,    23,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,    15,    23,    23,
    23,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,     1,    12,     5,     6,    -5,   -10,   -14,     1,     7,
     1,   -10,    -4,    -1,   nil,    72,   nil,   nil,   nil,   nil,
   nil,   nil,    34,   191,   -29,  -128,   nil,   -55,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,    20,    33,
   nil,   nil,   nil,    26,    24,    25,    27,    28,    29,    30,
    31,    32,    65,    79,   nil,   nil,    64,   nil,    70,    71 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 53, :_reduce_1,
  1, 53, :_reduce_2,
  2, 54, :_reduce_3,
  1, 54, :_reduce_4,
  8, 56, :_reduce_5,
  9, 56, :_reduce_6,
  10, 56, :_reduce_7,
  11, 56, :_reduce_8,
  4, 59, :_reduce_9,
  2, 59, :_reduce_10,
  4, 55, :_reduce_11,
  7, 61, :_reduce_12,
  4, 61, :_reduce_13,
  1, 62, :_reduce_14,
  3, 62, :_reduce_15,
  2, 63, :_reduce_16,
  2, 63, :_reduce_17,
  1, 64, :_reduce_18,
  3, 64, :_reduce_19,
  1, 58, :_reduce_20,
  1, 58, :_reduce_21,
  2, 66, :_reduce_22,
  2, 67, :_reduce_23,
  2, 67, :_reduce_24,
  2, 67, :_reduce_25,
  2, 67, :_reduce_26,
  2, 67, :_reduce_27,
  2, 67, :_reduce_28,
  2, 67, :_reduce_29,
  1, 67, :_reduce_30,
  2, 67, :_reduce_31,
  1, 67, :_reduce_32,
  2, 73, :_reduce_33,
  3, 65, :_reduce_34,
  2, 68, :_reduce_35,
  2, 69, :_reduce_36,
  2, 69, :_reduce_37,
  1, 76, :_reduce_38,
  1, 76, :_reduce_39,
  3, 76, :_reduce_40,
  3, 76, :_reduce_41,
  5, 70, :_reduce_42,
  1, 77, :_reduce_43,
  3, 77, :_reduce_44,
  11, 71, :_reduce_45,
  9, 71, :_reduce_46,
  5, 71, :_reduce_47,
  5, 72, :_reduce_48,
  1, 75, :_reduce_49,
  1, 75, :_reduce_50,
  1, 75, :_reduce_51,
  3, 75, :_reduce_52,
  2, 75, :_reduce_53,
  2, 75, :_reduce_54,
  3, 75, :_reduce_55,
  3, 75, :_reduce_56,
  3, 75, :_reduce_57,
  3, 75, :_reduce_58,
  3, 75, :_reduce_59,
  3, 75, :_reduce_60,
  3, 75, :_reduce_61,
  3, 75, :_reduce_62,
  3, 75, :_reduce_63,
  3, 75, :_reduce_64,
  3, 75, :_reduce_65,
  3, 75, :_reduce_66,
  3, 75, :_reduce_67,
  3, 75, :_reduce_68,
  3, 75, :_reduce_69,
  3, 74, :_reduce_70,
  4, 74, :_reduce_71,
  3, 79, :_reduce_72,
  1, 79, :_reduce_73,
  1, 60, :_reduce_74,
  1, 60, :_reduce_75,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 80, :_reduce_78,
  1, 81, :_reduce_79,
  1, 81, :_reduce_80,
  1, 57, :_reduce_81 ]

racc_reduce_n = 82

racc_shift_n = 187

racc_token_table = {
  false => 0,
  :error => 1,
  "TkString" => 2,
  "TkNum" => 3,
  "TkId" => 4,
  "not" => 5,
  :UMINUS => 6,
  "*" => 7,
  "/" => 8,
  "%" => 9,
  "div" => 10,
  "mod" => 11,
  "+" => 12,
  "-" => 13,
  "==" => 14,
  "/=" => 15,
  ">=" => 16,
  "<=" => 17,
  ">" => 18,
  "<" => 19,
  "and" => 20,
  "or" => 21,
  "func" => 22,
  "(" => 23,
  ")" => 24,
  "begin" => 25,
  "end" => 26,
  ";" => 27,
  "->" => 28,
  "," => 29,
  "program" => 30,
  "with" => 31,
  "do" => 32,
  "return" => 33,
  "=" => 34,
  "read" => 35,
  "write" => 36,
  "writeln" => 37,
  "if" => 38,
  "then" => 39,
  "else" => 40,
  "for" => 41,
  "from" => 42,
  "to" => 43,
  "by" => 44,
  "repeat" => 45,
  "times" => 46,
  "while" => 47,
  "number" => 48,
  "boolean" => 49,
  "true" => 50,
  "false" => 51 }

racc_nt_base = 52

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"TkString\"",
  "\"TkNum\"",
  "\"TkId\"",
  "\"not\"",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"div\"",
  "\"mod\"",
  "\"+\"",
  "\"-\"",
  "\"==\"",
  "\"/=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "\"and\"",
  "\"or\"",
  "\"func\"",
  "\"(\"",
  "\")\"",
  "\"begin\"",
  "\"end\"",
  "\";\"",
  "\"->\"",
  "\",\"",
  "\"program\"",
  "\"with\"",
  "\"do\"",
  "\"return\"",
  "\"=\"",
  "\"read\"",
  "\"write\"",
  "\"writeln\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\"for\"",
  "\"from\"",
  "\"to\"",
  "\"by\"",
  "\"repeat\"",
  "\"times\"",
  "\"while\"",
  "\"number\"",
  "\"boolean\"",
  "\"true\"",
  "\"false\"",
  "$start",
  "ESTRUCTURA",
  "FUNCIONES",
  "PROGRAMA",
  "FUNCION",
  "IDENTIFICADOR",
  "INSTRUCCIONES",
  "PARAMETROS",
  "TIPO",
  "BLOQUE",
  "LISTA_DECLARACION",
  "DECLARACION",
  "LISTA_IDENTIFICADOR",
  "ASIGNACION",
  "SECUENCIACION",
  "INSTRUCCION",
  "ENTRADA",
  "SALIDENTIFICADORA",
  "CONDICIONAL",
  "REPETICION_D",
  "REPETICION_I",
  "RETURN",
  "LLAMADA_FUNCION",
  "EXPRESION",
  "ESCRIBIR",
  "COND",
  "LITERAL",
  "LISTA_PASE_PARAMETROS",
  "LITERAL_NUMBER",
  "LITERAL_BOOLEAN" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_1(val, _values, result)
     return Estructura.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
     return Estructura.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_3(val, _values, result)
     result = ListaFunciones.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_5(val, _values, result)
     result = Funcion.new(val[1], nil, nil, val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_6(val, _values, result)
     result = Funcion.new(val[1], val[3], nil, val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_7(val, _values, result)
     result = Funcion.new(val[1], nil, val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_8(val, _values, result)
     result = Funcion.new(val[1], val[3], val[6], val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_9(val, _values, result)
     result = Parametros.new(val[0],val[1],val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_10(val, _values, result)
     result = Parametros.new(val[0],val[1],nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_11(val, _values, result)
     result = Programa.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_12(val, _values, result)
     result = Bloque.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_13(val, _values, result)
     result = Bloque.new(nil, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_14(val, _values, result)
     result = ListaDeclaracion.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_15(val, _values, result)
     result = ListaDeclaracion.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_16(val, _values, result)
     result = Declaracion.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_17(val, _values, result)
     result = Declaracion.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_18(val, _values, result)
     result = ListaId.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_19(val, _values, result)
     result = ListaId.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_20(val, _values, result)
     result = Secuenciacion.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_21(val, _values, result)
     result = Instruccion.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_22(val, _values, result)
     result = Instruccion.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_33(val, _values, result)
     result = Return.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_34(val, _values, result)
     result = Asignacion.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_35(val, _values, result)
     result = Entrada.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_36(val, _values, result)
     result = Salida.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_37(val, _values, result)
     result = Salida.new(val[1], "SALTO") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_40(val, _values, result)
     result = Escribir.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_41(val, _values, result)
     result = Escribir.new()
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_42(val, _values, result)
     result = Condicional.new(val[1],val[3],val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_44(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_45(val, _values, result)
     result = For.new(val[1], val[3], val[5], val[7], val[9])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_46(val, _values, result)
     result = For.new(val[1], val[3], val[5], nil, val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_47(val, _values, result)
     result = Repeat.new(val[1],val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_48(val, _values, result)
     result = RepeticionI.new(val[1],val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_52(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_53(val, _values, result)
     result = OpNot.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_54(val, _values, result)
     result = OpUMINUS.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_55(val, _values, result)
     result = OpMultiplicacion.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_56(val, _values, result)
     result = OpDivisionE.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_57(val, _values, result)
     result = OpModE.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_58(val, _values, result)
     result = OpDivision.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_59(val, _values, result)
     result = OpMod.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_60(val, _values, result)
     result = OpSuma.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_61(val, _values, result)
     result = OpResta.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_62(val, _values, result)
     result = OpEquivalente.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_63(val, _values, result)
     result = OpDesigual.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_64(val, _values, result)
     result = OpMayorIgual.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_65(val, _values, result)
     result = OpMenorIgual.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_66(val, _values, result)
     result = OpMayor.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_67(val, _values, result)
     result = OpMenor.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_68(val, _values, result)
     result = OpAnd.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_69(val, _values, result)
     result = OpOr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 192)
  def _reduce_70(val, _values, result)
     result = LlamadaFuncion.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_71(val, _values, result)
     result = LlamadaFuncion.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_72(val, _values, result)
     result = ListaPaseParametros.new(val[0],val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_73(val, _values, result)
     result = ListaPaseParametros.new(nil,val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_74(val, _values, result)
     result = TipoNum.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_75(val, _values, result)
     result = TipoBoolean.new() 
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_78(val, _values, result)
     result = LiteralNumerico.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_79(val, _values, result)
     result = LiteralBooleano.new("true") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_80(val, _values, result)
     result = LiteralBooleano.new("false") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_81(val, _values, result)
     result =  Identificador.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ParserRtn
